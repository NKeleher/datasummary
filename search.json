[
  {
    "objectID": "reference/datasummary.skim_frame.html",
    "href": "reference/datasummary.skim_frame.html",
    "title": "datasummary.skim_frame",
    "section": "",
    "text": "datasummary.skim_frame\ndatasummary.skim_frame(data, type='numeric', stats='simple', output='polars', float_precision=1, histogram=False, title='Summary Statistics', notes=None, align='r')\nSummary Statistics.\nGenerates summary statistics for a given DataFrame.\nArgs: data (DataFrameLike): The input DataFrame. Can be pandas or polars. type (str, optional): The type of summary statistics to generate. Defaults to “numeric”. output (str, optional): The output format for the summary statistics. Defaults to None. stats (str, optional): The summary statistics to return. Defaults to “simple”. float_precision (int, optional): The number of decimal places to round float values when formatting in table output. Defaults to 2. histogram (bool, optional): Whether to include a histogram in the output. Defaults to False. title (str, optional): The title of the summary statistics table. Defaults to “Summary Statistics”. notes (str, optional): Additional notes or comments. Defaults to None. align (str, optional): The alignment of the table columns. Defaults to “r”.\nReturns: pl.DataFrame: The summary statistics table.\nExamples: # Generate summary statistics for a numeric DataFrame summary = skim_frame(data)\n# Generate summary statistics for a categorical DataFrame\nsummary = skim_frame(data, type=\"categorical\")\n\n# Generate summary statistics in markdown format\nsummary = skim_frame(data, output=\"markdown\")",
    "crumbs": [
      "Reference",
      "datasummary",
      "datasummary.skim_frame"
    ]
  },
  {
    "objectID": "get_started.html",
    "href": "get_started.html",
    "title": "Get started with statsframe",
    "section": "",
    "text": "statsframe creates tables that provide descriptive statistics of numeric and categorical data.\nThe goal is to provide a simple – yet customizable – way to summarize data and models in Python.\nstatsframe is heavily inspired by modelsummary in R. The goal is not to replicate all that modelsummary does, but to provide a way of achieving similar results in Python.\nIn order to achieve this, statsframe builds on the polars library to produce tables that can be easily customized and exported to other formats."
  },
  {
    "objectID": "get_started.html#basic-usage",
    "href": "get_started.html#basic-usage",
    "title": "Get started with statsframe",
    "section": "Basic Usage",
    "text": "Basic Usage\nAs an example of statsframe usage, the skim function provides a summary of a DataFrame (either polars.DataFrame or pandas.DataFrame). The default summary statistics returned by statsframe.skim_frame() are unique values, percentage missing, mean, standard deviation, minimum, median, and maximum.\nWhere possible, statsframe will print a table to the console and return a polars DataFrame with the summary statistics. This allows for easy customization. For example, the polars.DataFrame with statistics from statsframe can be modified using the Great Tables package.\n\nimport polars as pl\nimport statsframe as sf\nfrom great_tables import GT\n\nfile_path = \"https://vincentarelbundock.github.io/Rdatasets/csv/datasets/\"\ndf = pl.read_csv(f\"{file_path}/mtcars.csv\").drop(\"rownames\")\n\nstats = sf.skim_frame(df)\n\nSummary Statistics\nRows: 32, Columns: 11\n┌──────┬────────────┬─────────────┬───────┬───────┬──────┬────────┬───────┐\n│      ┆ Unique (#) ┆ Missing (%) ┆  Mean ┆    SD ┆  Min ┆ Median ┆   Max │\n╞══════╪════════════╪═════════════╪═══════╪═══════╪══════╪════════╪═══════╡\n│  mpg ┆         25 ┆         0.0 ┆  20.1 ┆   6.0 ┆ 10.4 ┆   19.2 ┆  33.9 │\n│  cyl ┆          3 ┆         0.0 ┆   6.2 ┆   1.8 ┆  4.0 ┆    6.0 ┆   8.0 │\n│ disp ┆         27 ┆         0.0 ┆ 230.7 ┆ 123.9 ┆ 71.1 ┆  196.3 ┆ 472.0 │\n│   hp ┆         22 ┆         0.0 ┆ 146.7 ┆  68.6 ┆ 52.0 ┆  123.0 ┆ 335.0 │\n│ drat ┆         22 ┆         0.0 ┆   3.6 ┆   0.5 ┆  2.8 ┆    3.7 ┆   4.9 │\n│   wt ┆         29 ┆         0.0 ┆   3.2 ┆   1.0 ┆  1.5 ┆    3.3 ┆   5.4 │\n│ qsec ┆         30 ┆         0.0 ┆  17.8 ┆   1.8 ┆ 14.5 ┆   17.7 ┆  22.9 │\n│   vs ┆          2 ┆         0.0 ┆   0.4 ┆   0.5 ┆  0.0 ┆    0.0 ┆   1.0 │\n│   am ┆          2 ┆         0.0 ┆   0.4 ┆   0.5 ┆  0.0 ┆    0.0 ┆   1.0 │\n│ gear ┆          3 ┆         0.0 ┆   3.7 ┆   0.7 ┆  3.0 ┆    4.0 ┆   5.0 │\n│ carb ┆          6 ┆         0.0 ┆   2.8 ┆   1.6 ┆  1.0 ┆    2.0 ┆   8.0 │\n└──────┴────────────┴─────────────┴───────┴───────┴──────┴────────┴───────┘\n\n\n\n(df.pipe(sf.skim_frame, output=\"simple\"))\n\nSummary Statistics\nRows: 32, Columns: 11\n       Unique (#)  Missing (%)   Mean     SD   Min  Median    Max \n  mpg          25          0.0   20.1    6.0  10.4    19.2   33.9 \n  cyl           3          0.0    6.2    1.8   4.0     6.0    8.0 \n disp          27          0.0  230.7  123.9  71.1   196.3  472.0 \n   hp          22          0.0  146.7   68.6  52.0   123.0  335.0 \n drat          22          0.0    3.6    0.5   2.8     3.7    4.9 \n   wt          29          0.0    3.2    1.0   1.5     3.3    5.4 \n qsec          30          0.0   17.8    1.8  14.5    17.7   22.9 \n   vs           2          0.0    0.4    0.5   0.0     0.0    1.0 \n   am           2          0.0    0.4    0.5   0.0     0.0    1.0 \n gear           3          0.0    3.7    0.7   3.0     4.0    5.0 \n carb           6          0.0    2.8    1.6   1.0     2.0    8.0 \n\n\n\nshape: (11, 8)\n\n\n\n\nUnique (#)\nMissing (%)\nMean\nSD\nMin\nMedian\nMax\n\n\nstr\ni64\nf64\nf64\nf64\nf64\nf64\nf64\n\n\n\n\n\"mpg\"\n25\n0.0\n20.090625\n6.026948\n10.4\n19.2\n33.9\n\n\n\"cyl\"\n3\n0.0\n6.1875\n1.785922\n4.0\n6.0\n8.0\n\n\n\"disp\"\n27\n0.0\n230.721875\n123.938694\n71.1\n196.3\n472.0\n\n\n\"hp\"\n22\n0.0\n146.6875\n68.562868\n52.0\n123.0\n335.0\n\n\n\"drat\"\n22\n0.0\n3.596563\n0.534679\n2.76\n3.695\n4.93\n\n\n\"wt\"\n29\n0.0\n3.21725\n0.978457\n1.513\n3.325\n5.424\n\n\n\"qsec\"\n30\n0.0\n17.84875\n1.786943\n14.5\n17.71\n22.9\n\n\n\"vs\"\n2\n0.0\n0.4375\n0.504016\n0.0\n0.0\n1.0\n\n\n\"am\"\n2\n0.0\n0.40625\n0.498991\n0.0\n0.0\n1.0\n\n\n\"gear\"\n3\n0.0\n3.6875\n0.737804\n3.0\n4.0\n5.0\n\n\n\"carb\"\n6\n0.0\n2.8125\n1.6152\n1.0\n2.0\n8.0\n\n\n\n\n\n\n\n(df.pipe(sf.skim_frame, output=\"simple\").pipe(GT))\n\nSummary Statistics\nRows: 32, Columns: 11\n       Unique (#)  Missing (%)   Mean     SD   Min  Median    Max \n  mpg          25          0.0   20.1    6.0  10.4    19.2   33.9 \n  cyl           3          0.0    6.2    1.8   4.0     6.0    8.0 \n disp          27          0.0  230.7  123.9  71.1   196.3  472.0 \n   hp          22          0.0  146.7   68.6  52.0   123.0  335.0 \n drat          22          0.0    3.6    0.5   2.8     3.7    4.9 \n   wt          29          0.0    3.2    1.0   1.5     3.3    5.4 \n qsec          30          0.0   17.8    1.8  14.5    17.7   22.9 \n   vs           2          0.0    0.4    0.5   0.0     0.0    1.0 \n   am           2          0.0    0.4    0.5   0.0     0.0    1.0 \n gear           3          0.0    3.7    0.7   3.0     4.0    5.0 \n carb           6          0.0    2.8    1.6   1.0     2.0    8.0 \n\n\n\n\n\n\n\n\n\nUnique (#)\nMissing (%)\nMean\nSD\nMin\nMedian\nMax\n\n\n\n\nmpg\n25\n0.0\n20.090624999999996\n6.026948052089105\n10.4\n19.2\n33.9\n\n\ncyl\n3\n0.0\n6.1875\n1.7859216469465444\n4.0\n6.0\n8.0\n\n\ndisp\n27\n0.0\n230.72187500000004\n123.93869383138194\n71.1\n196.3\n472.0\n\n\nhp\n22\n0.0\n146.6875\n68.56286848932059\n52.0\n123.0\n335.0\n\n\ndrat\n22\n0.0\n3.5965625000000006\n0.5346787360709716\n2.76\n3.6950000000000003\n4.93\n\n\nwt\n29\n0.0\n3.2172499999999995\n0.9784574429896967\n1.513\n3.325\n5.424\n\n\nqsec\n30\n0.0\n17.848750000000003\n1.7869432360968431\n14.5\n17.71\n22.9\n\n\nvs\n2\n0.0\n0.4375\n0.5040161287741853\n0.0\n0.0\n1.0\n\n\nam\n2\n0.0\n0.40625\n0.49899091723584604\n0.0\n0.0\n1.0\n\n\ngear\n3\n0.0\n3.6875\n0.7378040652569471\n3.0\n4.0\n5.0\n\n\ncarb\n6\n0.0\n2.8125\n1.6151999776318522\n1.0\n2.0\n8.0\n\n\n\n\n\n\n        \n\n\nWe can achieve the same result above with a pandas DataFrame.\n\nimport pandas as pd\nimport statsframe as sf\n\ntrees_df = pd.read_csv(f\"{file_path}/trees.csv\").drop(columns=[\"rownames\"])\n\ntrees_stats = sf.skim_frame(trees_df)\n\nSummary Statistics\nRows: 31, Columns: 3\n┌────────┬────────────┬─────────────┬──────┬──────┬──────┬────────┬──────┐\n│        ┆ Unique (#) ┆ Missing (%) ┆ Mean ┆   SD ┆  Min ┆ Median ┆  Max │\n╞════════╪════════════╪═════════════╪══════╪══════╪══════╪════════╪══════╡\n│  Girth ┆         27 ┆         0.0 ┆ 13.2 ┆  3.1 ┆  8.3 ┆   12.9 ┆ 20.6 │\n│ Height ┆         21 ┆         0.0 ┆ 76.0 ┆  6.4 ┆ 63.0 ┆   76.0 ┆ 87.0 │\n│ Volume ┆         30 ┆         0.0 ┆ 30.2 ┆ 16.4 ┆ 10.2 ┆   24.2 ┆ 77.0 │\n└────────┴────────────┴─────────────┴──────┴──────┴──────┴────────┴──────┘\n\n\n\ncorr = sf.correlation_frame(df, method=\"pearson\")\n\nCorrelation Matrix\nRows: 32, Columns: 11\n┌──────┬───────┬───────┬───────┬───┬───────┬───────┬───────┬───────┐\n│  var ┆   mpg ┆   cyl ┆  disp ┆ … ┆    vs ┆    am ┆  gear ┆  carb │\n╞══════╪═══════╪═══════╪═══════╪═══╪═══════╪═══════╪═══════╪═══════╡\n│  mpg ┆  1.00 ┆ -0.85 ┆ -0.85 ┆ … ┆  0.66 ┆  0.60 ┆  0.48 ┆ -0.55 │\n│  cyl ┆ -0.85 ┆  1.00 ┆  0.90 ┆ … ┆ -0.81 ┆ -0.52 ┆ -0.49 ┆  0.53 │\n│ disp ┆ -0.85 ┆  0.90 ┆  1.00 ┆ … ┆ -0.71 ┆ -0.59 ┆ -0.56 ┆  0.39 │\n│   hp ┆ -0.78 ┆  0.83 ┆  0.79 ┆ … ┆ -0.72 ┆ -0.24 ┆ -0.13 ┆  0.75 │\n│ drat ┆  0.68 ┆ -0.70 ┆ -0.71 ┆ … ┆  0.44 ┆  0.71 ┆  0.70 ┆ -0.09 │\n│   wt ┆ -0.87 ┆  0.78 ┆  0.89 ┆ … ┆ -0.55 ┆ -0.69 ┆ -0.58 ┆  0.43 │\n│ qsec ┆  0.42 ┆ -0.59 ┆ -0.43 ┆ … ┆  0.74 ┆ -0.23 ┆ -0.21 ┆ -0.66 │\n│   vs ┆  0.66 ┆ -0.81 ┆ -0.71 ┆ … ┆  1.00 ┆  0.17 ┆  0.21 ┆ -0.57 │\n│   am ┆  0.60 ┆ -0.52 ┆ -0.59 ┆ … ┆  0.17 ┆  1.00 ┆  0.79 ┆  0.06 │\n│ gear ┆  0.48 ┆ -0.49 ┆ -0.56 ┆ … ┆  0.21 ┆  0.79 ┆  1.00 ┆  0.27 │\n│ carb ┆ -0.55 ┆  0.53 ┆  0.39 ┆ … ┆ -0.57 ┆  0.06 ┆  0.27 ┆  1.00 │\n└──────┴───────┴───────┴───────┴───┴───────┴───────┴───────┴───────┘\n\n\n\n(\n    GT(corr)\n    .data_color(\n        domain=[-1, 1],\n        palette=[\n            \"#636363\",\n            \"#bdbdbd\",\n            \"#f0f0f0\",\n            \"#ffffff\",\n            \"#f0f0f0\",\n            \"#bdbdbd\",\n            \"#636363\",\n        ],\n        na_color=\"#ffffff\",\n    )\n    .fmt_number(columns=df.columns, decimals=2)\n)\n\n\n\n\n\n\n\nvar\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nmpg\n1.00\n−0.85\n−0.85\n−0.78\n0.68\n−0.87\n0.42\n0.66\n0.60\n0.48\n−0.55\n\n\ncyl\n−0.85\n1.00\n0.90\n0.83\n−0.70\n0.78\n−0.59\n−0.81\n−0.52\n−0.49\n0.53\n\n\ndisp\n−0.85\n0.90\n1.00\n0.79\n−0.71\n0.89\n−0.43\n−0.71\n−0.59\n−0.56\n0.39\n\n\nhp\n−0.78\n0.83\n0.79\n1.00\n−0.45\n0.66\n−0.71\n−0.72\n−0.24\n−0.13\n0.75\n\n\ndrat\n0.68\n−0.70\n−0.71\n−0.45\n1.00\n−0.71\n0.09\n0.44\n0.71\n0.70\n−0.09\n\n\nwt\n−0.87\n0.78\n0.89\n0.66\n−0.71\n1.00\n−0.17\n−0.55\n−0.69\n−0.58\n0.43\n\n\nqsec\n0.42\n−0.59\n−0.43\n−0.71\n0.09\n−0.17\n1.00\n0.74\n−0.23\n−0.21\n−0.66\n\n\nvs\n0.66\n−0.81\n−0.71\n−0.72\n0.44\n−0.55\n0.74\n1.00\n0.17\n0.21\n−0.57\n\n\nam\n0.60\n−0.52\n−0.59\n−0.24\n0.71\n−0.69\n−0.23\n0.17\n1.00\n0.79\n0.06\n\n\ngear\n0.48\n−0.49\n−0.56\n−0.13\n0.70\n−0.58\n−0.21\n0.21\n0.79\n1.00\n0.27\n\n\ncarb\n−0.55\n0.53\n0.39\n0.75\n−0.09\n0.43\n−0.66\n−0.57\n0.06\n0.27\n1.00"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Customizable data and model summaries in Python.\n\n\n\ndatasummary.skim_frame\nSummary Statistics.",
    "crumbs": [
      "Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#datasummary",
    "href": "reference/index.html#datasummary",
    "title": "Function reference",
    "section": "",
    "text": "Customizable data and model summaries in Python.\n\n\n\ndatasummary.skim_frame\nSummary Statistics.",
    "crumbs": [
      "Reference",
      "Function reference"
    ]
  }
]